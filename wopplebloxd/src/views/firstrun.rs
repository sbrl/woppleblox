use actix_web::HttpRequest;
use fluent::{ FluentArgs };

use crate::global_state::GlobalState;
use crate::templates::{ PageParametersMain, TemplateFirstRun };
use crate::helpers_actix::HttpRequestHelper;
// Probably dynamically generated by a macro
// use crate::yarte::Template;
use crate::helpers_templating::PageRenderer;

use crate::translate;

pub struct ViewFirstRun;

impl ViewFirstRun {
	pub fn render(global_state: GlobalState, req: HttpRequest) -> String {
		let template = TemplateFirstRun {
			str_firstrun_welcome: translate!(global_state, req, "str_firstrun_welcome" ),
			// str_firstrun_welcome: &global_state.tr.translate_simple(
			// 	&req.get_req_lang(),
			// 	"str_firstrun_welcome"
			// ).unwrap(),
			str_firstrun_header_info: &global_state.tr.translate_simple(
				&req.get_req_lang(),
				"str_firstrun_header_info"
			).unwrap(),
			str_firstrun_button_begin: &global_state.tr.translate_simple(
				&req.get_req_lang(),
				"str_firstrun_button_begin"
			).unwrap(),
			str_label_username: &global_state.tr.translate_simple(
				&req.get_req_lang(),
				"str_label_username"
			).unwrap(),
			str_label_password: &global_state.tr.translate_simple(
				&req.get_req_lang(),
				"str_label_password"
			).unwrap(),
			str_label_password_repeat: &global_state.tr.translate_simple(
				&req.get_req_lang(),
				"str_label_password_repeat"
			).unwrap(),
			str_firstrun_header_admindetails: &global_state.tr.translate_simple(
				&req.get_req_lang(),
				"str_firstrun_header_admindetails"
			).unwrap(),
			str_label_secret: &global_state.tr.translate_simple(
				&req.get_req_lang(),
				"str_label_secret"
			).unwrap(),
			str_secret_explanation: &global_state.tr.translate_simple(
				&req.get_req_lang(),
				"str_secret_explanation"
			).unwrap(),
		};
		
		PageRenderer::render_main(
			&global_state, &req,
			&PageParametersMain { title_code: "title_firstrun" },
			&template
		)
	}
}
